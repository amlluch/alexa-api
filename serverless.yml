service: alexa-api
package:
  exclude:
    - ./**/**
  excludeDevDependencies: false
  include:
    - alexa_api/**

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, "develop"}
  stackName: ${self:service}
  environment:
    ENVIRONMENT: ${self:custom.environment}
    LOG_LEVEL: ${self:custom.logLevel}
    STAGE: ${self:custom.environment}
    DB_DEVICES_TABLE: ${self:custom.databaseTables.devicesTable}
    DB_INTENTS_TABLE: ${self:custom.databaseTables.dialogsTable}
    S3_CERTIFICATES: ${self:custom.certificatesBucket}
    IOT_CA_ROOT: ${self:custom.certs.caRoot}
    IOT_PRIV_PEM: ${self:custom.certs.privatePem}
    IOT_CERT_PEM: ${self:custom.certs.certificatePem}
    IOT_CLIENT_ID: ${self:custom.iot.clientId}
    IOT_ENDPOINT: ${self:custom.iot.endpoint}
    IOT_PORT: ${self:custom.iot.port}
    IOT_THING_NAME: ${self:custom.iot.thingName}
  apiName: ${self:service}
  apiKeys:
    - ${self:service}

plugins:
  - serverless-plugin-composed-vars
  - serverless-pseudo-parameters
  - serverless-aws-resource-names
  - serverless-python-requirements
  - serverless-alexa-skills
  - serverless-kms-grants
  - serverless-iam-roles-per-function
  - serverless-s3-deploy

custom:
  environment: ${opt:stage, "develop"}
  branch: ${opt:branch, 'develop'}
  databaseTables:
    devicesTable: ${self:custom.serviceName}.devices
    dialogsTable: ${self:custom.serviceName}.dialogs
  pythonRequirements:
    dockerizePip: true
    usePoetry: true
    noDeploy:
      - awscli
      - black
      - boto3
      - botocore
      - mypy
      - pre-commit
      - pytest
      - pytest-coverage
    layer:
      name: AlexaApiPythonLayer
      description: Python Lambda layer for alexa-api
      compatibleRuntimes:
        - python3.7
    useDownloadCache: false
    useStaticCache: false
  output:
    file: ${env:DEPLOYMENT_INFO, 'deployment.toml'}
  serverless-aws-resource-names:
    source: mapping.json
    variables:
      functionPrefix: alexa-api${env:FEATURE_BRANCH_UNDERSCORED, ''}
  tracing:
    lambda: true
    apiGateway: true
  tags:
    service: ${self:service}
  dashboard:
    lambda:
      enabled: true
  alexa:
    clientId: ${ssm.${self:custom.region}:/resource/alexa/client-id~true}
    clientSecret: ${ssm.${self:custom.region}:/resource/alexa/client-secret~true}
    vendorId: ${ssm.${self:custom.region}:/resource/alexa/vendor-id~true}
    localServerPort: 9500
  assets:
    auto: true
    targets:
      - bucket: ${self:custom.certificatesBucket}
        files:
          - source: certificates/
            globs:
              - '**/*.pem'
              - '**/*.crt'
              - '**/*.key'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: '*'

functions:
  hello_world:
    description: Hello World
    module: alexa_api/controller
    handler: alexa_api.controller.hello_world
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: /hello
          method: get
          private: true

  sns_dispatcher:
    description: Hello World for IoT
    module: alexa_api/controller
    handler: alexa_api.controller.sns_dispatcher
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
      - Effect: "Allow"
        Action:
          - SNS:Publish
          - SNS:SetTopicAttributes
        Resource: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:DeviceChanged
    environment:
      SNS_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:DeviceChanged
    events:
      - iot:
          name: 'iot_to_sns_dispatcher'
          sql: "SELECT state, action, device_name, device_id FROM '$aws/things/pool/shadow/update' "
          description: 'Gets all IoT events and resend them as a SNS message'

  create_device:
   description: Endpoint for creating a new device
   module: alexa_api/controller
   handler: alexa_api.controller.create_device
   layers:
     - {Ref: PythonRequirementsLambdaLayer}
   iamRoleStatements:
    - Effect: Allow
      Action:
       - dynamodb:Scan
       - dynamodb:Query
       - dynamodb:PutItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
    - Effect: "Allow"
      Action:
        - s3:ListBucket
      Resource: arn:aws:s3:::${self:custom.certificatesBucket}
    - Effect: "Allow"
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
   events:
    - http:
        path: /devices
        method: post

  update_device:
    description: Endpoint for updating devices
    module: alexa_api/controller
    handler: alexa_api.controller.update_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: put

  delete_device:
    description: Endpoint for deleting a device
    module: alexa_api/controller
    handler: alexa_api.controller.delete_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: delete

  get_device:
    description: Enpoint for getting device values
    module: alexa_api/controller
    handler: alexa_api.controller.get_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: get

  get_device_list:
    description: List of active devices
    module: alexa_api/controller
    handler: alexa_api.controller.get_device_list
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices
          method: get

  rpi_simulator:
    description: test
    module: alexa_api/controller
    handler: alexa_api.controller.rpi_simulator
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - iot:
          name: 'require_change_events'
          sql: "SELECT state, action, device_name, device_id FROM '$aws/things/pool/shadow/update' WHERE action = 'desired' "
          description: 'Alexa asks to change device status'

  hello_sns:
    description: sns test
    module: alexa_api/controller
    handler: alexa_api.controller.hello_sns
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - sns:
          arn: !Ref SNSTopic
          topicName: DeviceChanged
          filterPolicy:
            action:
              - changed

  skill_handler:
    description: Alexa skill controller
    module: alexa_api/controller
    handler: alexa_api.controller.skill_handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.dialogsTable}*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.dialogsTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - alexaSkill: amzn1.ask.skill.e9533954-285e-4996-aadf-ca1d531d9e65

resources:
  Resources:
    AlexaApiDevicesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.databaseTables.devicesTable}
        AttributeDefinitions:
          - AttributeName: device_id
            AttributeType: S
          - AttributeName: position
            AttributeType: N
          - AttributeName: GPIO
            AttributeType: N
        KeySchema:
          - AttributeName: device_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: by_position
            KeySchema:
              - AttributeName: position
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: by_GPIO
            KeySchema:
                - AttributeName: GPIO
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
    AlexaApiDialogsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.databaseTables.dialogsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: intent_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: by_intent_id
            KeySchema:
              - AttributeName: intent_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    S3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.certificatesBucket}

    SNSTopic:
      Type: AWS::SNS::Topic
      DeletionPolicy: Retain
      Properties:
        TopicName: DeviceChanged
